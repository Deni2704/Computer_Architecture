library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity test_env is
    Port ( 
        clk : in STD_LOGIC;
        btn : in STD_LOGIC_VECTOR (4 downto 0);
        sw : in STD_LOGIC_VECTOR (15 downto 0);
        led : out STD_LOGIC_VECTOR (15 downto 0);
        an : out STD_LOGIC_VECTOR (7 downto 0);
        cat : out STD_LOGIC_VECTOR (6 downto 0)
    );

end test_env;

architecture Behavioral of test_env is
    signal en: std_logic := '0';
  signal instruction:std_logic_vector(5 downto 0);
signal RegDst: std_logic;
signal ExtOp:  std_logic;
signal ALUSrc: std_logic;
signal Branch:  std_logic;
signal Branch_NE:  std_logic;
signal Jump:  std_logic;
signal AluOp:  std_logic_vector(1 downto 0);
signal MemWrite:  std_logic;
signal MemToReg:  std_logic;
signal RegWrite: std_logic;
signal wd :  std_logic_vector(31 downto 0);
signal ext_op: std_logic;
signal regwr :  std_logic;
signal reg_dest:  std_logic;
signal rd1 : std_logic_vector(31 downto 0);
signal rd2 : std_logic_vector(31 downto 0);
signal funct : std_logic_vector(5 downto 0);
signal ext_imm: std_logic_vector(31 downto 0);
signal sa:  std_logic_vector(4 downto 0);
    signal addr: std_logic_vector(4 downto 0);
    signal instruction_out: std_logic_vector(31 downto 0);
    signal pc_4_out: std_logic_vector(31 downto 0);
    signal mux_out: std_logic_vector(31 downto 0);
    
signal func_ext: std_logic_vector(31 downto 0);
signal sa_ext : std_logic_vector(31 downto 0);
signal sum: std_logic_vector(31 downto 0);
signal rez_mux: std_logic_Vector(31 downto 0);
signal zero : std_logic;
signal branch_address: std_logic_vector(31 downto 0);
signal alu_res : std_logic_vector(31 downto 0);
signal alu_res_in : std_logic_vector(31 downto 0);
signal alu_res_out : std_logic_vector(31 downto 0);
signal mem_data: std_logic_vector(31 downto 0);
signal jump_address: std_logic_vector(31 downto 0);
signal pc_src: std_logic;
signal si1: std_logic;
signal si2: std_logic;
    component MPG is
    Port ( enable : out STD_LOGIC;
           btn : in STD_LOGIC;
           clk : in STD_LOGIC);
end component;

component SSD is
    Port ( clk : in STD_LOGIC;
           digits : in STD_LOGIC_VECTOR(31 downto 0);
           an : out STD_LOGIC_VECTOR(7 downto 0);
           cat : out STD_LOGIC_VECTOR(6 downto 0));
end component;
 component IFetch 
  Port ( 
        jump: in std_logic;
        jumpAdress: in std_logic_vector(31 downto 0);
        PCSrc: in std_logic;
        BranchAdress: in std_logic_vector(31 downto 0);
        en: in std_logic;
        rst: in std_logic;
        clk: in std_logic;
        instruction: out std_logic_vector(31 downto 0);
        pc_4: out  std_logic_vector(31 downto 0)
    );
    end component;
    
component ID is
Port ( clk : in std_logic;
 instruction: in std_logic_vector(25 downto 0);
wd : in std_logic_vector(31 downto 0);
en : in std_logic;
ext_op:in std_logic;
regwr : in std_logic;
reg_dest: in std_logic;
rd1 : out std_logic_vector(31 downto 0);
rd2 : out std_logic_vector(31 downto 0);
funct : out std_logic_vector(5 downto 0);
ext_imm: out std_logic_vector(31 downto 0);
sa: out std_logic_vector(4 downto 0)
 );
end component;

component UC is
Port(
instruction:in std_logic_vector(5 downto 0);
RegDst:out std_logic;
ExtOp: out std_logic;
ALUSrc: out std_logic;
Branch: out std_logic;
Branch_NE: out std_logic;
Jump: out std_logic;
AluOp: out std_logic_vector(1 downto 0);
MemWrite: out std_logic;
MemToReg: out std_logic;
RegWrite:out std_logic
);
end component;

component EX is
Port (
AluSrc: in std_logic;
rd1: in std_logic_vector(31 downto 0);
rd2: in std_logic_vector(31 downto 0);
ext_imm:in std_logic_vector(31 downto 0);
func: in std_logic_Vector(5 downto 0);
sa: in std_logic_vector(4 downto 0);

alu_op: in std_logic_vector(1 downto 0);
pc_4: in std_logic_vector(31 downto 0);
zero: out std_logic;
alu_res: out std_logic_vector(31 downto 0);
branch_address: out std_logic_vector(31 downto 0)
 );
end component;

component mem is
Port (
  mem_write: in std_logic;
  alu_res_in: in std_logic_vector(31 downto 0);
  rd2: in std_logic_vector(31 downto 0);
  clk: in std_logic;
  en : in std_logic;
  mem_data : out std_logic_vector(31 downto 0);
  alu_res_out: out std_logic_vector(31 downto 0)

 );
end component;

begin
unitate_control: UC port map(instruction_out(31 downto 26),RegDst,ExtOp,ALUSrc,Branch,Branch_NE,Jump,AluOp,MemWrite,MemToReg,RegWrite);
i_d: ID port map(clk,instruction_out(25 downto 0), wd ,en, ExtOp,RegWrite, RegDst, rd1, rd2, funct, ext_imm, sa);
 monopulse: MPG port map(en, btn(0), clk);
 Fetch: IFetch port map(Jump,jump_address,pc_src,branch_address,en,btn(1),clk,instruction_out,pc_4_out);
ex_c: EX port map(ALUSrc, rd1,rd2,ext_imm,funct,sa,AluOp,pc_4_out,zero,alu_res,branch_address);
mem_c : mem port map(MemWrite,alu_res, rd2, clk, en, mem_data, alu_res);



process(MemToReg, alu_res_out, mem_data)
begin
case MemToReg is 
  when '0' => wd<=alu_res;
  when '1' => wd<=mem_Data;
  when others => wd<=X"00000000";
  end case;
end process;

si1<= Branch and zero;
si2<=Branch_NE and not(zero);
pc_src<=si1 or si2;

jump_address<= pc_4_out(31 downto 28) & instruction_out(25 downto 0) &  "00";


mux: process(sw(7 downto 5),instruction_out,pc_4_out,rd1,rd2,sum,ext_imm,alu_res,wd,mem_data)
begin
case sw(7 downto 5) is
when "000" => rez_mux<=instruction_out;
when "001" => rez_mux<=pc_4_out;
when "010" => rez_mux<=rd1;
when "011" => rez_mux<=rd2;
when "100" => rez_mux<=ext_imm;
when "101" => rez_mux<=alu_res;
when "110" => rez_mux<=mem_data;
when "111" => rez_mux<=wd;
when others=> rez_mux<=X"00000000";
end case;
end process;
led(10 downto 9) <= AluOp;
led(8)<=RegDst;
led(7)<=ExtOp;
led(6)<=ALUSrc;
led(5)<=Branch;
led(4)<=Branch_NE;
led(3)<=Jump;
led(2)<=MemWrite;
led(1)<=MemToReg;
led(0)<=RegWrite;
--led(10 downto 0)<=AluOp & RegDst& ExtOp & ALUSrc & Branch &Branch_NE& Jump &MemWrite &MemToReg &RegWrite;
    dispay: SSD port map(clk, rez_mux, an, cat);

end Behavioral;










----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 03/26/2024 04:48:09 PM
-- Design Name: 
-- Module Name: IFetch - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity IFetch is
   Port ( 
        jump: in std_logic;
        jumpAdress: in std_logic_vector(31 downto 0);
        PCSrc: in std_logic;
        BranchAdress: in std_logic_vector(31 downto 0);
        en: in std_logic;
        rst: in std_logic;
        clk: in std_logic;
        instruction: out std_logic_vector(31 downto 0);
        pc_4: out  std_logic_vector(31 downto 0)
    );
end IFetch;

architecture Behavioral of IFetch is
 type t_mem is array(0 to 31) of std_logic_vector(31 downto 0);
signal mem: t_mem := ( 
   B"100011_00000_01000_0000000000000000",--00 8C080000 lw $8,0($0)  Se încarcă X din memorie în registrul $t0
   B"100011_00000_00001_0000000000000100",--01 8C810004 lw $1,4($0) Se încarcă Y din memorie în registrul $t1
   B"100011_00000_00010_0000000000001000",--02 8C020008 lw $2,8($0) Se încarcă N din memorie în registrul $t2
   B"001000_00000_00011_0000000000000000",--03 20030010 addi $3, 0($0), 0 Se ini?ializează $t3 cu adresa începutului ?irului
       B"000000_00000_00000_00100_00000_100000",--04 2020 add $4, $0, 0  Se ini?ializează $t4 cu suma par?ială a elementelor
      B"000000_00000_00010_01010_00000_100000",--5 25020 add $10, $0, $2  numarul maxim de iteratii
    B"001000_00000_01001_0000000000000000",--06 20090001 addi $9, $0, 1  Se ini?ializează in 9 contorul 
   B"100011_00011_00101_0000000000010000",--8  8C650010 lw $5, 16($t3)  Se încarcă valoarea din memorie la adresa indicată de $t3 în $t5
   B"000000_01000_00101_00110_00000_101010",--9 105302A slt $6, $0, $5 Se verifică dacă valoarea este mai mare sau egală cu X
   B"000100_00110_00000_0000000000000011",--10  10C00003 beq $6, $0, 3  Se ver ifică dacă valoarea este mai mică decât x
    B"000000_00101_00001_00111_00000_101010",--11  A1382A slt $7, $5, $1  Se verifică dacă valoarea este mai mică decât Y
   B"000100_00111_00000_0000000000000000",--12  10E00000 beq $7,$0,0 Dacă valoarea nu este mai mică decât Y, adăugăm la sumă
   B"000000_00100_00101_00100_00000_100000", --13 852020 add $t4, $t4, $t5 Se adaugă valoarea la suma par?ială
   B"001000_00011_00011_0000000000000100",--14 20630000 addi $3, $3, 4    # Se trece la următorul element din ?ir
   B"001000_01001_01001_0000000000000001",--15 21290001 addi $9, $9, 1    # Se creste contorul
   B"000100_01001_01010_0000000000000001",--7 11220001 beq $9,$10 1   verific daca s au parcurs toate elem
   B"000010_00000000000000000000000111",--16 8000007 j 7--sar la urm element din sir 
   B"101011_00000_00100_0000000000001100", --17 AC04000C sw $4, 12($0) stochez la adresa 12 oe 4 
      B"100011_00000_00001_0000000000001100",--01 8C81000C lw $1,12($0) Se încarcă Y din memorie în registrul $t1

    others => X"00000000"
);
signal Q :std_logic_vector(31 downto 0);
signal D:std_logic_vector(31 downto 0);

signal mux1: std_logic_vector(31 downto 0);
begin
pc:
process(clk,rst)
begin 
  if rst='1' then 
    Q<=X"00000000";
  elsif rising_edge(clk) then
     if en='1' then
     Q<=D;
    end if;
   end if;
end process;
pc_4<= Q + 4;
instruction<=mem(conv_integer(Q(6 downto 2)));

mux_1:
process(PCSrc,BranchAdress)
begin 
case PCSrc is
when '0' => mux1<= Q+4;
when '1' => mux1<=BranchAdress;
when others => mux1<=X"00000000";
end case;
end process;

mux_2: 
process(jump,jumpAdress,mux1)
begin 
case jump is
when '0' => D<=mux1;
when '1' =>D<=jumpAdress;
when others => D<=X"00000000";
end case;
end process;


end Behavioral;




----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 03/26/2024 04:48:09 PM
-- Design Name: 
-- Module Name: IFetch - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity IFetch is
   Port ( 
        jump: in std_logic;
        jumpAdress: in std_logic_vector(31 downto 0);
        PCSrc: in std_logic;
        BranchAdress: in std_logic_vector(31 downto 0);
        en: in std_logic;
        rst: in std_logic;
        clk: in std_logic;
        instruction: out std_logic_vector(31 downto 0);
        pc_4: out  std_logic_vector(31 downto 0)
    );
end IFetch;

architecture Behavioral of IFetch is
 type t_mem is array(0 to 31) of std_logic_vector(31 downto 0);
signal mem: t_mem := ( 
   B"100011_00000_01000_0000000000000000",--00 8C080000 lw $8,0($0)  Se încarcă X din memorie în registrul $t0
   B"100011_00000_00001_0000000000000100",--01 8C810004 lw $1,4($0) Se încarcă Y din memorie în registrul $t1
   B"100011_00000_00010_0000000000001000",--02 8C020008 lw $2,8($0) Se încarcă N din memorie în registrul $t2
   B"001000_00000_00011_0000000000000000",--03 20030010 addi $3, 0($0), 0 Se ini?ializează $t3 cu adresa începutului ?irului
       B"000000_00000_00000_00100_00000_100000",--04 2020 add $4, $0, 0  Se ini?ializează $t4 cu suma par?ială a elementelor
      B"000000_00000_00010_01010_00000_100000",--5 25020 add $10, $0, $2  numarul maxim de iteratii
    B"001000_00000_01001_0000000000000000",--06 20090001 addi $9, $0, 1  Se ini?ializează in 9 contorul 
   B"100011_00011_00101_0000000000010000",--8  8C650010 lw $5, 16($t3)  Se încarcă valoarea din memorie la adresa indicată de $t3 în $t5
   B"000000_01000_00101_00110_00000_101010",--9 105302A slt $6, $0, $5 Se verifică dacă valoarea este mai mare sau egală cu X
   B"000100_00110_00000_0000000000000011",--10  10C00003 beq $6, $0, 3  Se ver ifică dacă valoarea este mai mică decât x
    B"000000_00101_00001_00111_00000_101010",--11  A1382A slt $7, $5, $1  Se verifică dacă valoarea este mai mică decât Y
   B"000100_00111_00000_0000000000000000",--12  10E00000 beq $7,$0,0 Dacă valoarea nu este mai mică decât Y, adăugăm la sumă
   B"000000_00100_00101_00100_00000_100000", --13 852020 add $t4, $t4, $t5 Se adaugă valoarea la suma par?ială
   B"001000_00011_00011_0000000000000100",--14 20630000 addi $3, $3, 4    # Se trece la următorul element din ?ir
   B"001000_01001_01001_0000000000000001",--15 21290001 addi $9, $9, 1    # Se creste contorul
   B"000100_01001_01010_0000000000000001",--7 11220001 beq $9,$10 1   verific daca s au parcurs toate elem
   B"000010_00000000000000000000000111",--16 8000007 j 7--sar la urm element din sir 
   B"101011_00000_00100_0000000000001100", --17 AC04000C sw $4, 12($0) stochez la adresa 12 oe 4 
      B"100011_00000_00001_0000000000001100",--01 8C81000C lw $1,12($0) Se încarcă Y din memorie în registrul $t1

    others => X"00000000"
);
signal Q :std_logic_vector(31 downto 0);
signal D:std_logic_vector(31 downto 0);

signal mux1: std_logic_vector(31 downto 0);
begin
pc:
process(clk,rst)
begin 
  if rst='1' then 
    Q<=X"00000000";
  elsif rising_edge(clk) then
     if en='1' then
     Q<=D;
    end if;
   end if;
end process;
pc_4<= Q + 4;
instruction<=mem(conv_integer(Q(6 downto 2)));

mux_1:
process(PCSrc,BranchAdress)
begin 
case PCSrc is
when '0' => mux1<= Q+4;
when '1' => mux1<=BranchAdress;
when others => mux1<=X"00000000";
end case;
end process;

mux_2: 
process(jump,jumpAdress,mux1)
begin 
case jump is
when '0' => D<=mux1;
when '1' =>D<=jumpAdress;
when others => D<=X"00000000";
end case;
end process;


end Behavioral;









----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/09/2024 05:11:49 PM
-- Design Name: 
-- Module Name: EX - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.std_logic_arith.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity EX is
Port (
AluSrc: in std_logic;
rd1: in std_logic_vector(31 downto 0);
rd2: in std_logic_vector(31 downto 0);
ext_imm:in std_logic_vector(31 downto 0);
func: in std_logic_Vector(5 downto 0);
sa: in std_logic_vector(4 downto 0);

alu_op: in std_logic_vector(1 downto 0);
pc_4: in std_logic_vector(31 downto 0);
zero: out std_logic;
alu_res: out std_logic_vector(31 downto 0);
branch_address: out std_logic_vector(31 downto 0)



 );
end EX;

architecture Behavioral of EX is
signal alu_control: std_logic_vector(2 downto 0);
signal A,B: std_logic_vector(31 downto 0);
signal C: std_logic_vector(31 downto 0);
signal rez_branch: std_logic_vector(31 downto 0);
begin
ALUControl:
process(alu_op, func)
begin
  case alu_op is
  when "10" => 
      case func is
         when "100000"=>alu_control<="000";
         when "100010"=>alu_control<="100";
         when "000000"=>alu_control<="001";
         when "000010"=>alu_control<="011";
         when "100100"=>alu_control<="110";
         when "100101"=>alu_control<="010";
         when "000011"=>alu_control<="101";
         when "101010"=> alu_control<="111";
         when others =>alu_control<=(others=>'X');
         end case;
  when "00" =>
         alu_control<="000";
 when "01" => alu_control<="100";
 when "11" => alu_control<="010";
 when others =>alu_control<=(others=>'X');
 end case;
 end process;
 
 
 mux:
 process(AluSrc, rd2,ext_imm)
 begin
 case AluSrc is
   when '0' => B<=rd2;
   when '1' => B<=ext_imm;
   when others => B<=X"00000000";
   end case;
   end process;
   
 A<=rd1;
 
process(alu_control,A,B)
begin
case alu_control is
   when "000" => C<= A + B;
   when "100" => C<=A - B;
   when "001" => C<=to_stdlogicvector(to_bitvector(B) sll conv_integer(sa));
   when "011" => C<=to_stdlogicvector(to_bitvector(B) srl conv_integer(sa));
   when "101" => C<=to_stdlogicvector(to_bitvector(B) sra conv_integer(sa));
   when "110" => C<=A and B;
   when "010" => C<=A or B;
   when "111" => if A < B then
                                C <= X"00000001";
                           else
                                C <= X"00000000";
                           end if;
   when others => C<=(others =>'X');
   
   end case;
end process;

rez_branch<=ext_imm(29 downto 0) & "00";
branch_address<= rez_branch + pc_4;
zero <='1' when C=X"00000000" else '0';
alu_res<=C;


end Behavioral;









----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/16/2024 01:18:54 PM
-- Design Name: 
-- Module Name: mem - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity mem is
Port (
  mem_write: in std_logic;
  alu_res_in: in std_logic_vector(31 downto 0);
  rd2: in std_logic_vector(31 downto 0);
  clk: in std_logic;
  en : in std_logic;
  mem_data : out std_logic_vector(31 downto 0);
  alu_res_out: out std_logic_vector(31 downto 0)

 );
end mem;

architecture Behavioral of mem is
type mem_type is array(0 to 63) of std_logic_vector(31 downto 0);
signal mem: mem_type := (
     X"0000000F",  -- Adresa 0: 15 (0x0F)
    X"00000028",  -- Adresa 4: 40 (0x28)
    X"00000007",  -- Adresa 8: 7 (0x0A)
   X"00000000", -- adresa 12 
    X"00000014",  -- Adresa 16: 20 (0x14)
    X"0000000A",  -- Adresa 20: 10 (0x0A)
    X"00000007",  -- Adresa 24: 7 (0x07)
   X"00000013",  -- Adresa 28: 19 (0x13)
     X"00000020",  -- Adresa 32: 32 (0x20)
    X"00000005",  -- Adresa 36: 5 (0x05)
     X"00000027",  -- Adresa 40: 39 (0x27)
     
    others => X"00000000"  -- Toate celelalte adrese ini?ializate cu 0
);


begin
mem_data<= mem(conv_integer(alu_res_in(7 downto 2)));
 

process(clk) 
begin
  if rising_edge(clk) then
     if en = '1' and mem_write = '1' then
     mem(conv_integer(alu_res_in(7 downto 2))) <= rd2;
     end if;
  end if;
end process;

alu_res_out<= alu_res_in;


end Behavioral;






----------------------------------------------------------------------------------
-- Company: Technical University of Cluj-Napoca 
-- Engineer: Cristian Vancea
-- 
-- Module Name: SSD - Behavioral
-- Description: 
--      Display on SSD Unit
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity SSD is
    Port ( clk : in STD_LOGIC;
           digits : in STD_LOGIC_VECTOR(31 downto 0);
           an : out STD_LOGIC_VECTOR(7 downto 0);
           cat : out STD_LOGIC_VECTOR(6 downto 0));
end SSD;

architecture Behavioral of SSD is

signal digit : STD_LOGIC_VECTOR(3 downto 0);
signal cnt : STD_LOGIC_VECTOR(16 downto 0) := (others => '0');
signal sel : STD_LOGIC_VECTOR(2 downto 0);

begin

    counter : process(clk) 
    begin
        if rising_edge(clk) then
            cnt <= cnt + 1;
        end if;
    end process;

    sel <= cnt(16 downto 14);

    muxCat : process(sel, digits)
    begin
        case sel is
            when "000" => digit <= digits(3 downto 0);
            when "001" => digit <= digits(7 downto 4);
            when "010" => digit <= digits(11 downto 8);
            when "011" => digit <= digits(15 downto 12);
            when "100" => digit <= digits(19 downto 16);
            when "101" => digit <= digits(23 downto 20);
            when "110" => digit <= digits(27 downto 24);
            when "111" => digit <= digits(31 downto 28);
            when others => digit <= (others => 'X');
        end case;
    end process;

    muxAn : process(sel)
    begin
        case sel is
            when "000" => an <= "11111110";
            when "001" => an <= "11111101";
            when "010" => an <= "11111011";
            when "011" => an <= "11110111";
            when "100" => an <= "11101111";
            when "101" => an <= "11011111";
            when "110" => an <= "10111111";
            when "111" => an <= "01111111";
            when others => an <= (others => 'X');
        end case;
    end process;

    with digit SELect
        cat <= "1000000" when "0000",   -- 0
               "1111001" when "0001",   -- 1
               "0100100" when "0010",   -- 2
               "0110000" when "0011",   -- 3
               "0011001" when "0100",   -- 4
               "0010010" when "0101",   -- 5
               "0000010" when "0110",   -- 6
               "1111000" when "0111",   -- 7
               "0000000" when "1000",   -- 8
               "0010000" when "1001",   -- 9
               "0001000" when "1010",   -- A
               "0000011" when "1011",   -- b
               "1000110" when "1100",   -- C
               "0100001" when "1101",   -- d
               "0000110" when "1110",   -- E
               "0001110" when "1111",   -- F
               (others => 'X') when others;

end Behavioral;